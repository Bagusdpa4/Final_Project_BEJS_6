openapi: 3.0.1
info:
  title: Final-Project-B-6
  description: API Pemesanan Ticketing Pesawat
  version: 1.0.0
servers:
  - url: http://localhost:3000/api/v1
tags:
  - name: "Users"
    description: Operations about user
paths:
  /users/register :
    post:
      tags:
        - "Users"
      summary: Register user
      description: Register user with the provided information.
      requestBody:
        $ref: '#/components/requestBodies/createUser'
                
      responses:
        201:
          description: User created was successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: User Created Successfully
                  data:
                    $ref: '#/components/schemas/UserResponse'

        400:
          description: Input must be required!
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: Input must be required
                  data:
                    example: ~

        401:
          description: Email already used!
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: Email already used!
                  data:
                    example: ~

  /users/login :
    post:
      tags:
        - "Users"
      summary: Login user
      description: Login user with the provided information.
      requestBody:
        $ref: '#/components/requestBodies/createLogin'
                
      responses:
        201:
          description: Login was successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: Login was successfull
                  data:
                    $ref: '#/components/schemas/LoginResponse'

        400:
          description: invalid email or password!
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: invalid email or password!
                  data:
                    example: ~   

        403:
          description: Verify Account User!
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: Account not verified. Please check your email!
                  data:
                    example: ~ 

  /users/verify-otp:
    put:
      tags:
        - "Users"    
      summary: Verify Otp Email User
      description: Verify Otp Email User
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                  example: sugab.dwi88@gmail.com
                otp: 
                  type: string
                  example: 123456

      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Activation successfully. You're Account is Verified"
                  
        400:
          description: OTP Expired
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: "OTP has expired. Please resend new otp."
                  data: 
                    example: ~ 

        401:
          description: Invalid OTP
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: "Invalid OTP"
                  data: 
                    example: ~ 

        404:
          description: user not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: "user not found"
                  data: 
                    example: ~

  /users/resend-otp:
    put:
      tags:
        - "Users"    
      summary: Resend Verify Otp Email User
      description: Resend Verify Otp Email User
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                  example: sugab.dwi88@gmail.com

      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Resend OTP successfully"

        404:
          description: user not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: "user not found"
                  data: 
                    example: ~    

  /users/forget-password:
    post:
      tags:
        - "Users"
      summary: Forget Password Email User
      description: Forget Password Email User
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                  example: sugab.dwi88@gmail.com

      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Success Send Email Forget Password"
                  
        404:
          description: user not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: "user not found"
                  data: 
                    example: ~

  /users/reset-password:
    put:
      tags:
        - "Users"
      summary: Reset Password Email User
      parameters:
        - schema:
            type: string
          name: token
          in: query
          description: token for update password
      description: Reset Password Email User
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                password:
                  type: string
                  example: qwerty
                passwordConfirmation:
                  type: string
                  example: qwerty

      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Your password has been updated successfully!"
                  data: 
                    properties:
                      id: 
                        type: integer
                        example: 1
                      name:
                        type: string
                        example: Bagus Dwi
                      email:
                        type: string
                        example: sugab.dwi88@gmail.com

        400:
          description: Both password and password confirmation are required!!
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: "Both password and password confirmation are required!!"
                  data: 
                    example: ~
        
        401:
          description: Please ensure that the password and password confirmation match!
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: "Please ensure that the password and password confirmation match!"
                  data: 
                    example: ~
                  
        403:
          description: Invalid or expired token!
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: "Invalid or expired token!"
                  data: 
                    example: ~

  /users/authenticate :
    get:
      tags:
        - "Users"
      summary: Authenticate user
      description: Authenticate user with the token.
                
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: OK
                  data:
                    $ref: '#/components/schemas/UserResponse'

        403:
          description: Token not provided!
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: token not provided!!
                  data:
                    example: ~

        409:
          description: jwt malformed!
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: jwt malformed
                  data:
                    example: ~        
      security:
        - bearerAuth: []

components:
  securitySchemes:
    bearerAuth:       
      type: http
      scheme: bearer       
      bearerFormat: JWT
  schemas:
    UserResponse:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: Bagus Dwi
        email:
          type: string
          example: sugab.dwi88@gmail.com
    LoginResponse:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: Bagus Dwi
        email:
          type: string
          example: sugab.dwi88@gmail.com
        token:
          type: string
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MSwiZmlyc3RfbmFtZSI6IkJhZ3VzIER3aSIsImxhc3RfbmFtZSI6IlB1dHJhIEFkaXlvbm8iLCJlbWFpbCI6InN1Z2FiLmR3aTg4QGdtYWlsLmNvbSIsImlhdCI6MTcxNDY1NTQ1N30.7mHMjtq0QvKWfZ41Nb5XMXKyfkcg4l7LX34yC-HBj3A 

  requestBodies:
    createLogin:
      content:
        application/json:
          schema:
            type: object
            properties:
              email:
                type: string
                example: sugab.dwi88@gmail.com
              password:
                type: string
                example: 123456
    createUser: 
      content:
        application/json:
          schema:
            type: object
            properties:
              name:
                type: string
                example: Bagus Dwi
              email:
                type: string
                example: sugab.dwi88@gmail.com
              password:
                type: string
                example: 123456