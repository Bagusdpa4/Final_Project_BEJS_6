// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           Int            @id @default(autoincrement())
  fullname     String
  family_name  String?
  email        String         @unique
  phoneNumber  String
  password     String
  avatar_url   String?
  google_id    String?
  otp          String?
  otpCreatedAt DateTime?
  isVerified   Boolean        @default(false)
  role         String         @default("user")
  notification Notification[]
  order        Order[]

  @@map("users")
}

model Flight {
  id                  Int            @id @default(autoincrement())
  flight_number       String         @unique
  city_arrive         City           @relation(name: "arrive", fields: [city_arrive_id], references: [id])
  city_destination    City           @relation(name: "destination", fields: [city_destination_id], references: [id])
  time_arrive         DateTime       @db.Time()
  time_departure      DateTime       @db.Time()
  date_flight         DateTime       @db.Date
  estimation_minute   Int
  DetailFlight        DetailFlight[]
  city_arrive_id      Int
  city_destination_id Int

  @@map("flights")
}

model DetailFlight {
  id              Int         @id @default(autoincrement())
  price           Int
  order           Order[]
  flight          Flight?     @relation(fields: [flight_id], references: [id])
  flight_id       Int?
  detailPlaneId   DetailPlane @relation(fields: [detail_plane_id], references: [id])
  detail_plane_id Int

  @@map("detail_flight")
}

model Plane {
  id          Int           @id @default(autoincrement())
  name        String
  brand       String?
  series      String        @unique
  capacity    Int
  airline_id  Airlines      @relation(fields: [airlinesId], references: [id])
  airlinesId  Int
  DetailPlane DetailPlane[]

  @@map("planes")
}

model DetailPlane {
  id            Int            @id @default(autoincrement())
  total_seat    Int
  seat_class    SeatClass      @relation(fields: [seat_class_id], references: [id])
  plane         Plane          @relation(fields: [plane_id], references: [id])
  seat_class_id Int
  plane_id      Int
  DetailFlight  DetailFlight[]

  @@map("detail_plane")
}

model Airlines {
  id       Int     @id @default(autoincrement())
  code     String  @unique
  name     String
  since    String
  logo_url String
  Plane    Plane[]

  @@map("airlines")
}

model SeatClass {
  id          Int           @id @default(autoincrement())
  type_class  String
  DetailPlane DetailPlane[]

  @@map("seat_class")
}

model Passenger {
  id              Int      @id @default(autoincrement())
  title           String
  fullname        String
  family_name     String
  birth_date      String
  nationality     String
  identity_type   String?
  identity_number String   @unique
  expired_date    DateTime
  issuing_country String
  age_group       Int
  gender          String?
  order           Order    @relation(fields: [order_id], references: [id])
  order_id        Int

  @@map("passengers")
}

model Continent {
  id      Int       @id @default(autoincrement())
  name    String
  code    String    @unique
  country Country[]

  @@map("continents")
}

model Country {
  id           Int       @id @default(autoincrement())
  name         String
  code         String    @unique
  continent    Continent @relation(fields: [continent_id], references: [id])
  continent_id Int
  city         City[]

  @@map("countries")
}

model City {
  id                 Int      @id @default(autoincrement())
  name               String
  code               String   @unique
  airport_name       String
  country            Country  @relation(fields: [country_id], references: [id])
  country_id         Int
  flight_arrive      Flight[] @relation(name: "arrive")
  flight_destination Flight[] @relation(name: "destination")

  @@map("cities")
}

model Order {
  id               Int          @id @default(autoincrement())
  code             String       @unique
  status           String       @default("unpaid")
  expired_paid     DateTime
  passenger        Passenger[]
  user             User?        @relation(fields: [user_id], references: [id])
  user_id          Int?
  payment          Payment      @relation(fields: [payment_id], references: [id])
  payment_id       Int          @unique
  detailFlight     DetailFlight @relation(fields: [detail_flight_id], references: [id])
  detail_flight_id Int

  @@map("orders")
}

model Payment {
  id             Int      @id @default(autoincrement())
  amount         String
  method_payment String
  createdAt      DateTime
  order          Order?

  @@map("payments")
}

model Notification {
  id        Int      @id @default(autoincrement())
  title     String
  message   String
  isRead    Boolean  @default(false)
  createdAt DateTime
  user      User     @relation(fields: [user_id], references: [id])
  user_id   Int

  @@map("notifications")
}
